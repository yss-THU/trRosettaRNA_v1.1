# Instructions for running the trRosettaRNA standalone package.

**Update:** The predict script has been enhanced to support custom secondary structure files as input.

Overview
====

This package is a part of trRosettaRNA, a deep learning-based RNA structure prediction protocol. 
The trRosettaRNA pipeline comprises two major steps: 
	- 1D and 2D geometries prediction using a transformer network.
		1D geometries: backbone torsion angles.
		2D geometries: inter-nucleotide distances and orientations.
		The precise definition of these geometries can be found in Figure S1 in the Support Information.
	- full-atom 3D structure folding by energy minimization.
		The energy function used in this step is based on the predicted geometries and physics-based energy terms in Rosetta.  
		Please refer to Text S1 in the Support Information for more details about the used energy function.
For more information about the trRosettaRNA pipeline, please refer to the first subsection of the METHODS section in the manuscript.


Installation
====  
Step 1 Base environment installation
	
	It is recommended to use conda to manage the Python dependencies, which can be installed following https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html#regular-installation.
	Once the conda is installed, a new environment can be created and activated depended on your cuda version (can be seen by `nvidia-smi` or `nvcc -V`)
	```
	### create conda environment for trRosettaRNA ###
	#   If your cuda version is 11.x
	conda env create -f linux.yml
	#   If not (cuda 10.x)
	conda env create -f linux-cu102.yml

	# activate the installed environment
	conda activate trRNA
	```
	
Step 2 Install SPOT-RNA
	
	Install SPOT-RNA following https://github.com/jaswindersingh2/SPOT-RNA.
	```
	git clone https://github.com/jaswindersingh2/SPOT-RNA.git
	cd SPOT-RNA
	wget 'https://www.dropbox.com/s/dsrcf460nbjqpxa/SPOT-RNA-models.tar.gz' || wget -O SPOT-RNA-models.tar.gz 'https://app.nihaocloud.com/f/fbf3315a91d542c0bdc2/?dl=1'
	tar -xvzf SPOT-RNA-models.tar.gz && rm SPOT-RNA-models.tar.gz
	#    If wget failed:
	# ln -s ../params/SPOT-RNA-models SPOT-RNA-models 
	conda create -n spot_venv python=3.6
	conda activate spot_venv
	conda install tensorflow-gpu==1.14.0
	while read p; do conda install --yes $p; done < requirements.txt
	cd ..
	conda deactivate # back to trRNA environment
	```
	
Step 3 Install pyRosetta

	Before install pyRosetta, the RosettaCommons conda channel should be added to the channel lists (see [RosettaCommons Conda Channel](https://www.pyrosetta.org/downloads#h.c0px19b8kvuw)).
	Then run
	```
	conda activate trRNA
	conda install -y pyrosetta
	```


Usage
====

Step 1. Predict the 1D and 2D geometries using a transformer network.
	
	The inputs include 1) MSA (multiple sequence alignment, in A3M format) and 2) secondary structure.
	
	1) MSA
		The MSA can be generated with searching tools such as [Infernal](http://eddylab.org/infernal/) (recommend) and [BLASTN](https://blast.ncbi.nlm.nih.gov/).
		The recommended sequence databases include [NT](https://ftp.ncbi.nlm.nih.gov/blast/db/FASTA/) and [RNAcentral](https://rnacentral.org/).
		
		The MSA file should be processed into A3M format (see https://yanglab.qd.sdu.edu.cn/trRosettaRNA/msa_format.html) before prediction. 
	2) secondary structure
		The secondary structure will be predicted by SPOT-RNA automatically and needless of manual processing.
		
	An example for prediction:
	```
	python predict.py -i example/seq.a3m -o example/seq.npz -mdir ./params/model_1 -gpu 0
	```
	
	arguments for `predict.py`:
	
		> -i          input multiple sequence alignment in A3M format (*required*)
		> -o          output npz file containing predicted distograms and anglegrams (*required*)
		> -ss         the custom secondary structure (SS) file (optional; if not provided, SPOT-RNA will be executed automatically)
		> -ss_fmt     the format of custom SS file (optional; spot_prob/dot_bracket(default)/ct)
		> -mdir	      path to pretrained models (optional, default to `./params/model_1`)
		> -gpu	      use which GPU (optional, default to "-1", i.e., use CPU only)
		> -cpu	      number of CPU cores to use (optional, default to 2)
		
	The predicted geometries will be output to a NPZ file, which will subsequently serve as a guide for the folding process of the 3D structure in step 2.

    This script has been enhanced to support custom secondary structure files as input.
	It now supports formats including dot_bracket, ct, and the .prob file generated by SPOT-RNA. Below are usage examples:
	```
	# dot_bracket
	python predict.py -i example/seq.a3m -o example/seq.npz -ss example/seq.dbn -ss_fmt dot_bracket -mdir ./params/model_1 -gpu 0
	# ct
	python predict.py -i example/seq.a3m -o example/seq.npz -ss example/seq.ct -ss_fmt ct -mdir ./params/model_1 -gpu 0
	# spot_prob
	python predict.py -i example/seq.a3m -o example/seq.npz -ss example/seq.prob -ss_fmt spot_prob -mdir ./params/model_1 -gpu 0
	```

Step 2. Generate 3D structure using the predicted geometries.
	
	In this step, Tthe predicted geometries from step 1 will be transformed into energy potentials. 
	These potentials, combined with Rosetta's internal energy term, will then guide the 3D structure folding process through energy minimization.
	
	```
	python fold.py -npz example/seq.npz -fa example/seq.fasta -out example/model_1.pdb
	```
	
	arguments for `fold.py`:
	
		> -npz	       input NPZ file storing the predicted geometries (*required*)
		> -fa          input FASTA file storing the nucleotide sequence (*required*)
		> -out	       output PDB file storing the predicted 3D structure (*required*)
		> -tmp	       temp folder to store all the restraints (default:/dev/shm/)
		> -nm	       number of decoys to generate (default:5)
		> -dcut	       min probability of distance restraints (default: 0.45)
		> --cpu        number of cpus to use (default:5)
	
	This script will generate `nm` decoys and only output the decoy with minimum free energy.